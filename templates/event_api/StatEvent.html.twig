{% extends 'nav_admin.html.twig' %}

{% block title %}Statistiques des événements par type{% endblock %}

{% block body %}
<div class="container mt-4">
  <div class="row justify-content-center">
    <div class="col-lg-6 col-md-8 col-sm-10">
      <div class="card">
        <div class="card-body">
          <h2 class="card-title mb-3 text-center">Nombre d'événements par types</h2>
          <div class="text-center"> {# Ajout de la classe text-center #}
            <div class="chart-container" style="position: relative; height: 200px;">
              <canvas id="myChart"></canvas>
            </div>
            <div class="legend mt-3 d-flex flex-wrap justify-content-center">
              {% set colors = ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)'] %}
              {% for stat in statsByType %}
                <div class="legend-item mr-3">
                  <span class="color-box" style="background-color: {{ colors[loop.index0] }}"></span>
                  <span class="label-text">{{ stat.nomType }}</span>
                  
                </div>
              {% endfor %}
              
            </div>
          </div>
        </div>
      </div>
    </div>
    <h2 class="card-title mb-3 text-center">Nombre d'événements par types</h2>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Récupérer les données des statistiques depuis le contrôleur
  var statsByType = {{ statsByType|json_encode|raw }};
  
  // Préparation des données pour le graphique
  var labels = statsByType.map(function(stat) { return stat.nomType; });
  var counts = statsByType.map(function(stat) { return stat.count; });

  // Fonction pour obtenir une couleur en fonction de l'index
  function getColor(index) {
    var colors = ['rgba(255, 99, 132, 0.8)', 'rgba(54, 162, 235, 0.8)', 'rgba(255, 206, 86, 0.8)', 'rgba(75, 192, 192, 0.8)', 'rgba(153, 102, 255, 0.8)', 'rgba(255, 159, 64, 0.8)'];
    return colors[index % colors.length];
  }

  var ctx = document.getElementById('myChart').getContext('2d');
  var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: '',  // Aucun label pour le graphique
        data: counts,
        backgroundColor: labels.map(function(_, index) { return getColor(index); }),  // Utilisation de la fonction getColor pour obtenir les couleurs
        borderColor: labels.map(function(_, index) { return getColor(index); }),       // Utilisation de la fonction getColor pour obtenir les couleurs
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      legend: {
        display: false
      },
      scales: {
        xAxes: [{
          ticks: {
            autoSkip: false
          }
        }],
        yAxes: [{
          ticks: {
            beginAtZero: true
          }
        }]
      }
    }
  });
</script>
<style>
  .legend-item {
    display: flex;
    align-items: center;
  }
  .color-box {
    width: 20px;
    height: 20px;
    margin-right: 5px;
  }
  .label-text {
    font-size: 16px;
  }
</style>
{% endblock %}
